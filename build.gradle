buildscript {
  ext {
    springBootVersion = '2.6.4'
    springDocVersion = '1.6.6'
    novaVersion = '3.0.4'
    therapiRuntimeJavadocVersion = '0.13.0'
    jjwtVersion = '0.11.2'
  }
}

plugins {
  id 'base'
  id 'io.freefair.lombok' version '6.4.1' apply false
  id 'org.hibernate.orm' version '5.6.5.Final' apply false
  id 'com.palantir.git-version' version '0.13.0'
  id 'org.springframework.experimental.aot' version '0.11.3'
  id 'org.springframework.boot' version "${springBootVersion}" apply false
  id 'io.spring.dependency-management' version '1.0.11.RELEASE' apply false
}

def gitVer = gitVersion()

version gitVer.startsWith('v')
    ? gitVer.substring(1, gitVer.endsWith('.dirty') ? gitVer.length() - 6 : gitVer.length())
    : 'edge'

allprojects {
  group('net.cryptic-game')

  repositories {
    mavenCentral {
      content { excludeGroup('de.m4rc3l.nova') }
    }
    maven {
      url 'https://repo.spring.io/release/'
      content { excludeGroup('de.m4rc3l.nova') }
    }
    maven {
      url 'https://mvn.m4rc3l.de'
      content { includeGroup('de.m4rc3l.nova') }
    }
  }
}

subprojects {
  version rootProject.version

  apply plugin: 'java'
  apply plugin: 'io.freefair.lombok'
  apply plugin: 'io.spring.dependency-management'

  sourceCompatibility = JavaVersion.VERSION_17
  targetCompatibility = JavaVersion.VERSION_17

  dependencyManagement {
    imports {
      mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
    }
  }

  tasks.withType(Jar) {
    from "${rootDir}/LICENSE"
    manifest.attributes([
        'Specification-Title'     : project.name,
        'Specification-Version'   : project.version,
        'Specification-Vendor'    : 'Cryptic Game (https://github.com/cryptic-game)',
        'Implementation-Title'    : project.name,
        'Implementation-Version'  : project.version,
        'Implementation-Vendor'   : 'Cryptic Game (https://github.com/cryptic-game)',
        'Implementation-Timestamp': new Date().format('yyyy-MM-dd\'T\'HH:mm:ssZ')
    ])
  }

  tasks.withType(JavaCompile) {
    doFirst {
      options.encoding = 'UTF-8'
    }
  }

  lombok {
    config.put('lombok.equalsandhashcode.callsuper', 'CALL')
    config.put('lombok.tostring.callsuper', 'CALL')
  }

  test {
    useJUnitPlatform()
  }

  jar {
    preserveFileTimestamps false
    reproducibleFileOrder true
  }
}
