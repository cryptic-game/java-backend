plugins {
  id 'org.hibernate.orm'
  id 'org.springframework.boot'
  id 'org.springframework.experimental.aot'
}

dependencies {
  implementation 'org.springframework.boot:spring-boot-starter'

  implementation project(':cryptic-common')

  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
  implementation "de.m4rc3l.nova:nova-data-jpa:${novaVersion}"
  runtimeOnly 'org.postgresql:postgresql'
  runtimeOnly 'org.flywaydb:flyway-core'

  implementation 'io.micrometer:micrometer-registry-prometheus'

  implementation 'org.springframework.boot:spring-boot-starter-data-redis-reactive'

  implementation 'org.springframework.boot:spring-boot-starter-webflux'
  implementation "de.m4rc3l.nova:nova-core:${novaVersion}"
  implementation 'org.springframework.boot:spring-boot-starter-actuator'

  implementation "io.jsonwebtoken:jjwt-api:${jjwtVersion}"
  runtimeOnly "io.jsonwebtoken:jjwt-impl:${jjwtVersion}"
  runtimeOnly "io.jsonwebtoken:jjwt-jackson:${jjwtVersion}"

  implementation "org.springdoc:springdoc-openapi-webflux-ui:${springDocVersion}"
  implementation "org.springdoc:springdoc-openapi-native:${springDocVersion}"
  implementation "org.springdoc:springdoc-openapi-javadoc:${springDocVersion}"
  annotationProcessor "com.github.therapi:therapi-runtime-javadoc-scribe:${therapiRuntimeJavadocVersion}"

  implementation platform('io.sentry:sentry-bom:5.6.3')
  implementation 'io.sentry:sentry-spring-boot-starter'
  implementation 'io.sentry:sentry-logback'

//  developmentOnly 'org.springframework.boot:spring-boot-devtools'
  annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
  annotationProcessor 'org.springframework:spring-context-indexer'
  // testImplementation 'org.springframework.boot:spring-boot-starter-test'
  // testImplementation 'io.projectreactor:reactor-test'
}

springBoot {
  buildInfo()
}

hibernate {
  enhance {
    enableLazyInitialization = true
    enableDirtyTracking = true
    enableAssociationManagement = true
    enableExtendedEnhancement = false
  }
}

def nativeImage = findProperty("flavor") == "native"

bootBuildImage {
  if (nativeImage) {
    builder = "paketobuildpacks/builder:tiny"
  }

  environment = [
      "BPE_DELIM_JAVA_TOOL_OPTIONS" : " ",
      "BPE_APPEND_JAVA_TOOL_OPTIONS": "-DspringAot=true",
      "BPL_JAVA_NMT_ENABLED"        : "false", // native memory tracking
      "BP_NATIVE_IMAGE"             : nativeImage.toString()
  ]
}
